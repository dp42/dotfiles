"===================================================================
" Basic Settings
"===================================================================
set nocompatible "vi互換モードを無効化
source ~/.vim/plugins.vim
syntax on "シンタックスハイライト有効
set nofixeol
set ambiwidth=double
set splitbelow "垂直分割時、ウインドウを下に分割
set splitright "水平分割時、ウインドウを右に分割
set nostartofline "行の移動時、行頭に移動しない
set confirm "バッファが変更されている時、コマンドエラーではなく確認を返す
set visualbell "ビープ音の代わりに画面フラッシュを使用する
set t_vb= "画面フラッシュも無効にする
set mouse=a "全モードでマウス有効化
set clipboard=unnamed "クリップボードからコピーできるようにする
set wildmode=list:longest,full "tabで確定部分まで入力、リストを表示してtabでトグル
set hidden "バッファを保存せずに新しいバッファを開く
set backspace=indent,eol,start "BSでインデント、改行、挿入モード開始位置以前の文字を削除可能にする
set noswapfile "swapファイルを作成しない
set nobackup "バックアップファイルを作成しない
set notitle
set noundofile "アンドゥファイルを作成しない"
let g:asyncomplete_auto_completeopt = 0
set completeopt=menuone,noinsert,noselect
set clipboard=unnamed
set textwidth=0
au BufNewFile,BufRead *.vue set filetype=vue
au BufNewFile,BufRead *.ts set filetype=typescript
set encoding=utf-8
scriptencoding utf-8
set fileencodings=ucs-bom,utf-8,iso-2022-jp,euc-jp,cp932,sjis,latin1 "日本語自動識別用設定
set autoindent
set tabstop=2
set shiftwidth=2
set expandtab
set softtabstop=2
set spell
set spelllang=en,cjk
set autoread
let g:auto_ctags_tags_args = '--tag-relative=yes --recurse --sort=yes'
let g:sql_type_default = 'mysql'

if filereadable(expand('~/vimrc.local'))
  source ~/vimrc.local
endif

if !has('nvim')
  set spelloptions=camel
  packadd matchit
endif

"===================================================================
" Keymap
"===================================================================
let mapleader="\<Space>"
" ESCでターミナル終了
tnoremap <ESC> <C-W>:q!<CR>
"ESCで検索ハイライトを消す
nnoremap  <silent> <Esc><Esc> :nohlsearch<CR><Esc>
"タグジャンプの候補が複数ある場合はリストを出す
nnoremap <C-]> g<C-]>
"xで削除した文字をヤンクしない
nnoremap x "_x
vnoremap x "_x
nmap <silent> <leader>d <Plug>DashSearch
" Split window
nmap ss :split<Return>
nmap sv :vsplit<Return>
" Move window
map mh <C-w>h
map mk <C-w>k
map mj <C-w>j
map ml <C-w>l

" Command Line Mode
cnoremap <C-a> <Home>
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <C-d> <Del>
cnoremap <C-e> <End>

"===================================================================
" Search
"===================================================================
set ignorecase "大文字小文字を区別せずに検索
set smartcase "大文字が含まれているときは区別して検索する
set incsearch "インクリメンタルサーチを有効化
set hlsearch "検索結果をハイライト
set wrapscan "最後まで検索したら一番上に戻る
set showcmd "入力中のコマンドを最下行に表示

"===================================================================
" Appearance
"===================================================================
set t_ut=
set number "行番号を表示
set ruler "ルーラー表示
set laststatus=2 "ステータスラインを常に表示
set list "不可視文字を表示する
set listchars=tab:>-,trail:-,eol:↲ "不可視文字の設定内容
set cmdheight=2 "コマンド行の高さを2行に設定
autocmd Filetype json,markdown,csv setl conceallevel=0
".jsファイルでもJSXをハイライト
let g:jsx_ext_required = 0

" for tmux
if &term == 'screen-256color'
  let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
  let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
endif

set termguicolors
set background=dark
colorscheme iceberg

"===================================================================
" lexima
"===================================================================
let g:lexima_no_default_rules = 1
call lexima#set_default_rules()

"===================================================================
" vim-lsp
"===================================================================
let g:lsp_diagnostics_enabled = 0

nmap <silent> <leader>lh <Plug>(lsp-hover)
nmap <silent> <leader>ld <Plug>(lsp-definition)
nmap <silent> <leader>lt <Plug>(lsp-type-definition)
nmap <silent> <leader>lr <Plug>(lsp-references)
inoremap <expr><CR> pumvisible() ? asyncomplete#close_popup() : lexima#expand('<LT>CR>', 'i')
inoremap <expr><C-e> pumvisible() ? asyncomplete#cancel_popup() : "\<C-e>"


if executable('gopls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls']},
        \ 'whitelist': ['go'],
        \ })
    autocmd BufWritePre *.go LspDocumentFormatSync
endif

if executable('intelephense')
  augroup LspPHPIntelephense
    au!
    au User lsp_setup call lsp#register_server({
        \ 'name': 'intelephense',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'intelephense --stdio']},
        \ 'whitelist': ['php'],
        \ 'initialization_options': {'storagePath': '/tmp/intelephense'},
        \ 'workspace_config': {
        \   'intelephense': {
        \     'files': {
        \       'maxSize': 1000000,
        \       'associations': ['*.php', '*.phtml'],
        \       'exclude': [],
        \     },
        \     'completion': {
        \       'insertUseDeclaration': v:true,
        \       'fullyQualifyGlobalConstantsAndFunctions': v:false,
        \       'triggerParameterHints': v:true,
        \       'maxItems': 100,
        \     },
        \     'format': {
        \       'enable': v:true
        \     },
        \     'environment': {
        \       'phpVersion': $INTELEPHENSE_PHP_VERSION
        \     },
        \   },
        \ }
        \})
  augroup END
endif

if executable('solargraph')
    " gem install solargraph
    au User lsp_setup call lsp#register_server({
        \ 'name': 'solargraph',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
        \ 'initialization_options': {"diagnostics": "false"},
        \ 'whitelist': ['ruby'],
        \ })
endif

if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx'],
        \ })
endif

autocmd FileType typescript,javascript,ruby,php,go setlocal omnifunc=lsp#complete

"===================================================================
" ALE
"===================================================================
nmap <leader>af <Plug>(ale_fix)
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

let g:ale_set_highlights = 0
let g:ale_lint_on_enter = 0
let g:ale_sign_column_always = 1
let g:ale_sign_error = "E"
let g:ale_sign_warning = "W"
let g:ale_linters = {
\   'ruby': ['ruby', 'rubocop'],
\   'php': ['php', 'phpcs', 'phpmd', 'phan'],
\   'javascript': ['eslint'],
\   'typescript': ['eslint'],
\   'vue': ['eslint'],
\   'go': ['gofmt'],
\   'css': ['stylelint'],
\   'scss': ['stylelint']
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'ruby': ['rubocop'],
\   'php': ['php_cs_fixer'],
\   'javascript': ['eslint'],
\   'typescript': ['eslint'],
\   'vue': ['eslint'],
\   'go': ['gofmt']
\}
let g:ale_php_phpcs_standard = 'PSR2'
let g:ale_php_phpmd_ruleset = 'cleancode,codesize,design,naming'
let g:ale_php_cs_fixer_executable = 'php-cs-fixer'
let g:ale_php_cs_fixer_options = '--config-file=.php_cs'
let g:ale_go_gometalinter_options = '--fast'

"===================================================================
"NERD Tree
"===================================================================
nnoremap <silent><leader>n :NERDTreeToggle<CR>
let NERDTreeMapActivateNode='<space>'
let NERDTreeShowHidden = 1

"===================================================================
" fzf
"===================================================================
"ファイル検索
nmap <leader>ff :Files<CR>
"バッファ検索
nmap <leader>fb :Buffers<CR>
"タグ検索
nmap <leader>ft :Tags<CR>
"ファイル履歴検索
nmap <leader>fh :History<CR>
"Rg
nmap <leader>fr :Rg<CR>

" Rg with preview
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --line-number --no-heading --color=auto --smart-case '.shellescape(<q-args>),
  \   0,
  \   fzf#vim#with_preview({'options': '-e --delimiter : --nth 3..'}, 'right:60%'),
  \   <bang>0)

" Rg with preview
command! -bang -nargs=* Rge
  \ call fzf#vim#grep(
  \   'rg -E euc-jp --line-number --no-heading --color=auto --smart-case '.shellescape(<q-args>),
  \   0,
  \   fzf#vim#with_preview({'options': '-e --delimiter : --nth 3..'}, 'right:60%'),
  \   <bang>0)

" Files command with preview
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview('right:60%'), <bang>0)

"===================================================================
"fugitive.vim
"===================================================================
" delete deprecated commands
augroup DeleteDeprecatedFugitiveCommand
  autocmd!
  autocmd VimEnter * delcommand Gremove
  autocmd VimEnter * delcommand Gdelete
  autocmd VimEnter * delcommand Gmove
  autocmd VimEnter * delcommand Grename
  autocmd VimEnter * delcommand Gbrowse
  autocmd VimEnter * delcommand Gblame
  autocmd VimEnter * delcommand Gcommit
  autocmd VimEnter * delcommand Gmerge
  autocmd VimEnter * delcommand Gpull
  autocmd VimEnter * delcommand Grebase
  autocmd VimEnter * delcommand Grevert
  autocmd VimEnter * delcommand Gpush
  autocmd VimEnter * delcommand Gfetch
  autocmd VimEnter * delcommand Glog
  autocmd VimEnter * delcommand Gstatus
augroup END

nnoremap <silent> <leader>gs :G<CR>
nnoremap <silent> <leader>ga :Gwrite<CR>
nnoremap <silent> <leader>gc :G commit<CR>
nnoremap <silent> <leader>gd :Gdiffsplit<CR>


"===================================================================
"Lightline.vim
"===================================================================
let g:lightline = {
      \ 'colorscheme': 'iceberg',
      \ 'active': {
      \   'right': [ [ 'fileencoding' ],
      \              [ 'lineinfo' ],
      \              [ 'linter_checking', 'linter_errors', 'linter_warnings' ] ],
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified' ],
      \             [ 'fugitive' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*FugitiveHead") && ""!=FugitiveHead()?"\uE0A0 " . FugitiveHead():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*FugitiveHead") && ""!=FugitiveHead())'
      \ },
      \ 'component_expand': {
      \   'linter_checking': 'lightline#ale#checking',
      \   'linter_warnings': 'lightline#ale#warnings',
      \   'linter_errors': 'lightline#ale#errors',
      \   'linter_ok': 'lightline#ale#ok',
      \ },
      \ 'component_type': {
      \   'linter_warnings': 'warning',
      \   'linter_errors': 'error',
      \   'linter_checking': 'left',
      \ },
      \ 'separator': { 'left': "", 'right': "" },
      \ 'subseparator': { 'left': "|", 'right': "|" }
      \ }


"===================================================================
" PHP
"===================================================================
" 文字列中のSQLをハイライト
let php_sql_query           = 1
" Baselibメソッドのハイライト
let php_baselib             = 1
" 文字列中のHTMLをハイライト
let php_htmlInStrings       = 1
" <? をハイライト除外にする
let php_noShortTags         = 1
" カッコが閉じていない場合にハイライト
let php_parent_error_close  = 1
" SQLのシンタックスハイライトをMySQLにする
let g:sql_type_default = 'mysql'


"===================================================================
" Markdown
"===================================================================
let g:vim_markdown_folding_disabled = 1
