"===================================================================
" Basic settings
"===================================================================
set nocompatible "vi互換モードを無効化
filetype off "ファイルタイプ自動検出を一旦無効化
syntax on "シンタックスハイライト有効
set nofixeol
set ambiwidth=single
set splitbelow "垂直分割時、ウインドウを下に分割
set splitright "水平分割時、ウインドウを右に分割
set nostartofline "行の移動時、行頭に移動しない
set confirm "バッファが変更されている時、コマンドエラーではなく確認を返す
set visualbell "ビープ音の代わりに画面フラッシュを使用する
set t_vb= "画面フラッシュも無効にする
set mouse=a "全モードでマウス有効化
set clipboard=unnamed "クリップボードからコピーできるようにする
set wildmode=list:longest,full "tabで確定部分まで入力、リストを表示してtabでトグル
set hidden "バッファを保存せずに新しいバッファを開く
set backspace=indent,eol,start "BSでインデント、改行、挿入モード開始位置以前の文字を削除可能にする
set noswapfile "swapファイルを作成しない
set nobackup "バックアップファイルを作成しない
set notitle
set noundofile "アンドゥファイルを作成しない"
set completeopt=menuone "補完の結果をプレビューさせない
let mapleader="\<Space>"
set clipboard=unnamed
set textwidth=0
autocmd FileType text setlocal textwidth=0
packadd! matchit
set grepprg=grep\ -srnIH\ --exclude-dir=.git\ --exclude=tags
au QuickfixCmdPost make,grep,grepadd,vimgrep copen


"===================================================================
" Charset
"===================================================================
set encoding=utf-8
scriptencoding utf-8
set fileencodings=ucs-bom,utf-8,iso-2022-jp,euc-jp,cp932,sjis,latin1 "日本語自動識別用設定

"===================================================================
" Indentation
"===================================================================
set autoindent
set tabstop=2
set shiftwidth=2
set expandtab
set softtabstop=2

"===================================================================
" Search
"===================================================================
set ignorecase "大文字小文字を区別せずに検索
set smartcase "大文字が含まれているときは区別して検索する
set incsearch "インクリメンタルサーチを有効化
set hlsearch "検索結果をハイライト
set wrapscan "最後まで検索したら一番上に戻る
set showcmd "入力中のコマンドを最下行に表示


"===================================================================
" Appearance
"===================================================================
set t_ut=
set number "行番号を表示
set ruler "ルーラー表示
set laststatus=2 "ステータスラインを常に表示
set list "不可視文字を表示する
set colorcolumn=80 "80文字目に目印
set listchars=tab:>-,trail:-,eol:↲ "不可視文字の設定内容
set cmdheight=2 "コマンド行の高さを2行に設定

"===================================================================
" Syntax highlighting
"===================================================================
"JSONのダブルクオーテーションマークを表示する
autocmd Filetype json setl conceallevel=0
".jsファイルでもJSXをハイライト
let g:jsx_ext_required = 0

"markdownファイルでconceal無効化
let g:vim_markdown_conceal = 0
autocmd Filetype markdown setl conceallevel=0

"===================================================================
" Key bindings
"===================================================================
"ESCで検索ハイライトを消す
nmap <Esc><Esc> :nohlsearch<CR><Esc>
"タグジャンプの候補が複数ある場合はリストを出す
nnoremap <C-]> g<C-]>
"xで削除した文字をヤンクしない
nnoremap x "_x
" jjでエスケープ
inoremap <silent> jj <ESC>
"fzfでファイル検索
nmap <leader>f :Files<CR>
"fzfでバッファ検索
nmap <leader>b :Buffers<CR>
"fzfでタグ検索
nmap <leader>t :Tags<CR>


"===================================================================
" PHP Development
"===================================================================
" 文字列中のSQLをハイライト
let php_sql_query           = 1
" Baselibメソッドのハイライト
let php_baselib             = 1
" 文字列中のHTMLをハイライト
let php_htmlInStrings       = 1
" <? をハイライト除外にする
let php_noShortTags         = 1
" カッコが閉じていない場合にハイライト
let php_parent_error_close  = 1
" SQLのシンタックスハイライトをMySQLにする
let g:sql_type_default = 'mysql'


"===================================================================
"dein.vim
"===================================================================
" required:
set runtimepath+=~/.vim/bundles/repos/github.com/shougo/dein.vim

" required:
if dein#load_state('~/.vim/bundles')
  call dein#begin('~/.vim/bundles')

  let  s:toml = '~/.vim/dein.toml'
  let  s:lazy_toml = '~/.vim/dein_lazy.toml'

  call dein#load_toml(s:toml, {'lazy': 0})
  call dein#load_toml(s:lazy_toml, {'lazy': 1})

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

if dein#check_install()
  call dein#install()
endif

"カラースキームはcall dein#end()の後で設定する必要がある
set term=screen-256color
let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
set termguicolors
set background=dark
colorscheme iceberg


"===================================================================
"NERD Tree
"===================================================================
nnoremap <silent><leader>n :NERDTreeToggle<CR>
let NERDTreeMapActivateNode='<space>'
let NERDTreeShowHidden = 1


"===================================================================
"Lightline.vim
"===================================================================
let g:lightline = {
      \ 'colorscheme': 'iceberg',
      \ 'active': {
      \   'right': [ [ 'lineinfo' ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ],
      \              [ 'linter_checking', 'linter_errors', 'linter_warnings' ] ],
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*fugitive#head") && ""!=fugitive#head()?"\uE0A0 " . fugitive#head():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
      \ },
      \ 'component_expand': {
      \   'linter_checking': 'lightline#ale#checking',
      \   'linter_warnings': 'lightline#ale#warnings',
      \   'linter_errors': 'lightline#ale#errors',
      \   'linter_ok': 'lightline#ale#ok',
      \ },
      \ 'component_type': {
      \   'linter_warnings': 'warning',
      \   'linter_errors': 'error',
      \   'linter_checking': 'left',
      \ },
      \ 'separator': { 'left': "\uE0B0", 'right': "\uE0B2" },
      \ 'subseparator': { 'left': "\uE0B1", 'right': "\uE0B3" }
      \ }


"===================================================================
"Neosnippet.vim
"===================================================================
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
let g:neosnippet#disable_runtime_snippets = {'_' : 1}
let g:neosnippet#snippets_directory = ['~/.vim/bundles/.cache/vimrc/.dein/neosnippets','~/.vim/snippets/']
call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
    \ 'name': 'neosnippet',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
    \ }))


"===================================================================
" Previm
"===================================================================
let g:previm_open_cmd = "open -a \"Google Chrome\""
augroup PrevimSettings
  autocmd!
  autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
augroup END


"===================================================================
"Dash.vim
"===================================================================
nmap <silent> <leader>d <Plug>DashSearch


"===================================================================
" VimDevIcons
"===================================================================
let g:WebDevIconsUnicodeDecorateFolderNodes = 1


"===================================================================
" Vim Markdown
"===================================================================
let g:vim_markdown_folding_disabled = 1


"===================================================================
" LSP settings
"===================================================================
let g:lsp_diagnostics_enabled = 0
if executable('solargraph')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'solargraph',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
        \ 'initialization_options': {"diagnostics": "true"},
        \ 'whitelist': ['ruby'],
        \ })
endif

if executable('gopls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
endif

au User lsp_setup call lsp#register_server({
     \ 'name': 'php-language-server',
     \ 'cmd': {server_info->['php', expand('~/.vim/bundles/repos/github.com/felixfbecker/php-language-server/bin/php-language-server.php')]},
     \ 'whitelist': ['php'],
     \ })

if executable('typescript-language-server')
  au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'whitelist': ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx'],
        \ })
endif


"===================================================================
" fzf
"===================================================================
set rtp+=/usr/local/opt/fzf


"===================================================================
" auto-ctags
"===================================================================
let g:auto_ctags = 1
let g:auto_ctags_tags_args = '--tag-relative=yes --recurse --sort=yes'
